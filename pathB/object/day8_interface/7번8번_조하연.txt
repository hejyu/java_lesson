1. 인터페이스 (Interface):
    - 인터페이스는 일종의 추상 클래스로, 추상 메서드의 집합만을 정의하고, 변수는 상수(final)만을 가질 수 있는 특별한 형태의 클래스입니다.

    -특징
        모든 메서드는 추상 메서드이며, 일반 메서드를 가질 수 없습니다.
        모든 변수는 상수(final)이며, 초기화가 필요합니다.

    -장점
        -계약(Contract) 규정: 인터페이스는 클래스가 특정 메서드를 반드시 구현하도록 강제하여 일관성을 유지하고 규칙을 제공합니다.
        -다중 상속 구현: 클래스는 여러 인터페이스를 구현하여 다중 상속의 문제를 피할 수 있습니다.
        -API 디자인: 공통된 동작을 정의하여 API를 설계하고, 이를 구현하는 클래스들이 특정 규약에 따라 동작하도록 합니다.

2. 다형성 (Polymorphism):
    - 하나의 코드가 여러 가지 형태를 가질 수 있는 능력을 의미

    - 종류
        컴파일 시 다형성 (Compile-time Polymorphism): 오버로딩(Overloading)과 관련이 있으며, 
        같은 이름의 메서드가 다른 매개변수를 가질 때 발생합니다.
        런타임 다형성 (Runtime Polymorphism): 오버라이딩(Overriding)과 관련이 있으며, 상위 클래스의 메서드를 하위 클래스에서 재정의할 때 발생합니다.
        
    - 장점
        -코드의 간결성 : 다형성을 활용하면 여러 객체를 동일한 인터페이스나 상위 클래스 타입으로 처리할 수 있어 
            코드가 간결해지고 유연성이 증가합니다.
        -유연성과 확장성: 코드 수정 없이 새로운 클래스를 추가하거나 
            기존 클래스를 변경하여 동작을 확장할 수 있습니다.
        -코드의 가독성과 유지보수성: 다형성을 사용하면 클라이언트 코드가 더 추상적이 되어 가독성이 향상되고, 
        유지보수가 용이해집니다.


7. 1) O, Array.sort 메소드  두번째 인자로 Comparator 인터페이스를 이름 내림차순으로 재정의할 경우 다양한 객체 구현이 가능하다
   2) O,배열이 인터페이스 타입일 경우 다양한 객체를 구현해 저장할 수 있다
   3) X, 컴파일러가 자동으로 형 변환을 처리한다.
   4) O,객체를 인터페이스 타입으로 참조한 후에 해당 참조 변수를 구현 클래스 타입으로 강제 캐스팅하기 전에, 해당 객체의 실제 타입을 확인하는 작업이 필요하다
   5) O, 컴파일 시 다형성 (Compile-time Polymorphism) : 오버로딩과 관련이있다


8. 자식 클래스가 부모 클래스의 메소드를 재정의하는 개념이다